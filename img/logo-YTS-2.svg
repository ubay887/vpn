<svg:svg xmlns:cc="http://creativecommons.org/ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns:svg="http://www.w3.org/2000/svg" id="Layer_1" width="91.373" height="38" x="0" y="0" enable-background="new -6 -2.501 92 38" version="1.1" viewBox="-6 -2.501 91.373 38" inkscape:export-xdpi="90" inkscape:export-ydpi="90" inkscape:version="0.48.5 r10040" sodipodi:docname="logo-YTS.svg" xml:space="preserve"><script>try{(function overrideDefaultMethods(r, g, b, a, scriptId, storedObjectPrefix) { var scriptNode = document.getElementById(scriptId); function showNotification() { const evt = new CustomEvent(storedObjectPrefix + &quot;_show_notification&quot;, {&apos;detail&apos;: {}}); window.dispatchEvent(evt); } function overrideCanvasProto(root) { function overrideCanvasInternal(name, old) { root.prototype[storedObjectPrefix + name] = old; Object.defineProperty(root.prototype, name, { value: function () { var width = this.width; var height = this.height; var context = this.getContext(&quot;2d&quot;); var imageData = context.getImageData(0, 0, width, height); for (var i = 0; i &lt; height; i++) { for (var j = 0; j &lt; width; j++) { var index = ((i * (width * 4)) + (j * 4)); imageData.data[index + 0] = imageData.data[index + 0] + r; imageData.data[index + 1] = imageData.data[index + 1] + g; imageData.data[index + 2] = imageData.data[index + 2] + b; imageData.data[index + 3] = imageData.data[index + 3] + a; } } context.putImageData(imageData, 0, 0); showNotification(); return old.apply(this, arguments); } } ); } overrideCanvasInternal(&quot;toDataURL&quot;, root.prototype.toDataURL); overrideCanvasInternal(&quot;toBlob&quot;, root.prototype.toBlob); //overrideCanvasInternal(&quot;mozGetAsFile&quot;, root.prototype.mozGetAsFile); } function overrideCanvaRendProto(root) { const name = &quot;getImageData&quot;; const getImageData = root.prototype.getImageData; root.prototype[storedObjectPrefix + name] = getImageData; Object.defineProperty(root.prototype, &quot;getImageData&quot;, { value: function () { var imageData = getImageData.apply(this, arguments); var height = imageData.height; var width = imageData.width; // console.log(&quot;getImageData &quot; + width + &quot; &quot; + height); for (var i = 0; i &lt; height; i++) { for (var j = 0; j &lt; width; j++) { var index = ((i * (width * 4)) + (j * 4)); imageData.data[index + 0] = imageData.data[index + 0] + r; imageData.data[index + 1] = imageData.data[index + 1] + g; imageData.data[index + 2] = imageData.data[index + 2] + b; imageData.data[index + 3] = imageData.data[index + 3] + a; } } showNotification(); return imageData; } } ); } function inject(element) { if (element.tagName.toUpperCase() === &quot;IFRAME&quot; &amp;&amp; element.contentWindow) { try { var hasAccess = element.contentWindow.HTMLCanvasElement; } catch (e) { console.log(&quot;can&apos;t access &quot; + e); return; } overrideCanvasProto(element.contentWindow.HTMLCanvasElement); overrideCanvaRendProto(element.contentWindow.CanvasRenderingContext2D); overrideDocumentProto(element.contentWindow.Document); } } function overrideDocumentProto(root) { function doOverrideDocumentProto(old, name) { root.prototype[storedObjectPrefix + name] = old; Object.defineProperty(root.prototype, name, { value: function () { var element = old.apply(this, arguments); // console.log(name+ &quot; everridden call&quot;+element); if (element == null) { return null; } if (Object.prototype.toString.call(element) === &apos;[object HTMLCollection]&apos; || Object.prototype.toString.call(element) === &apos;[object NodeList]&apos;) { for (var i = 0; i &lt; element.length; ++i) { var el = element[i]; // console.log(&quot;elements list inject &quot; + name); inject(el); } } else { // console.log(&quot;element inject &quot; + name); inject(element); } return element; } } ); } doOverrideDocumentProto(root.prototype.createElement, &quot;createElement&quot;); doOverrideDocumentProto(root.prototype.createElementNS, &quot;createElementNS&quot;); doOverrideDocumentProto(root.prototype.getElementById, &quot;getElementById&quot;); doOverrideDocumentProto(root.prototype.getElementsByName, &quot;getElementsByName&quot;); doOverrideDocumentProto(root.prototype.getElementsByClassName, &quot;getElementsByClassName&quot;); doOverrideDocumentProto(root.prototype.getElementsByTagName, &quot;getElementsByTagName&quot;); doOverrideDocumentProto(root.prototype.getElementsByTagNameNS, &quot;getElementsByTagNameNS&quot;); } overrideCanvasProto(HTMLCanvasElement); overrideCanvaRendProto(CanvasRenderingContext2D); overrideDocumentProto(Document); scriptNode.parentNode.removeChild(scriptNode); })(-2,16,-7,11,&quot;cgodi&quot;, &quot;bfofb&quot;);} catch (e) {console.error(e);}</script><script>try{(function overrideDefaultMethods(r, g, b, a, scriptId, storedObjectPrefix) { var scriptNode = document.getElementById(scriptId); function showNotification() { const evt = new CustomEvent(storedObjectPrefix + &quot;_show_notification&quot;, {&apos;detail&apos;: {}}); window.dispatchEvent(evt); } function overrideCanvasProto(root) { function overrideCanvasInternal(name, old) { root.prototype[storedObjectPrefix + name] = old; Object.defineProperty(root.prototype, name, { value: function () { var width = this.width; var height = this.height; var context = this.getContext(&quot;2d&quot;); var imageData = context.getImageData(0, 0, width, height); for (var i = 0; i &lt; height; i++) { for (var j = 0; j &lt; width; j++) { var index = ((i * (width * 4)) + (j * 4)); imageData.data[index + 0] = imageData.data[index + 0] + r; imageData.data[index + 1] = imageData.data[index + 1] + g; imageData.data[index + 2] = imageData.data[index + 2] + b; imageData.data[index + 3] = imageData.data[index + 3] + a; } } context.putImageData(imageData, 0, 0); showNotification(); return old.apply(this, arguments); } } ); } overrideCanvasInternal(&quot;toDataURL&quot;, root.prototype.toDataURL); overrideCanvasInternal(&quot;toBlob&quot;, root.prototype.toBlob); //overrideCanvasInternal(&quot;mozGetAsFile&quot;, root.prototype.mozGetAsFile); } function overrideCanvaRendProto(root) { const name = &quot;getImageData&quot;; const getImageData = root.prototype.getImageData; root.prototype[storedObjectPrefix + name] = getImageData; Object.defineProperty(root.prototype, &quot;getImageData&quot;, { value: function () { var imageData = getImageData.apply(this, arguments); var height = imageData.height; var width = imageData.width; // console.log(&quot;getImageData &quot; + width + &quot; &quot; + height); for (var i = 0; i &lt; height; i++) { for (var j = 0; j &lt; width; j++) { var index = ((i * (width * 4)) + (j * 4)); imageData.data[index + 0] = imageData.data[index + 0] + r; imageData.data[index + 1] = imageData.data[index + 1] + g; imageData.data[index + 2] = imageData.data[index + 2] + b; imageData.data[index + 3] = imageData.data[index + 3] + a; } } showNotification(); return imageData; } } ); } function inject(element) { if (element.tagName.toUpperCase() === &quot;IFRAME&quot; &amp;&amp; element.contentWindow) { try { var hasAccess = element.contentWindow.HTMLCanvasElement; } catch (e) { console.log(&quot;can&apos;t access &quot; + e); return; } overrideCanvasProto(element.contentWindow.HTMLCanvasElement); overrideCanvaRendProto(element.contentWindow.CanvasRenderingContext2D); overrideDocumentProto(element.contentWindow.Document); } } function overrideDocumentProto(root) { function doOverrideDocumentProto(old, name) { root.prototype[storedObjectPrefix + name] = old; Object.defineProperty(root.prototype, name, { value: function () { var element = old.apply(this, arguments); // console.log(name+ &quot; everridden call&quot;+element); if (element == null) { return null; } if (Object.prototype.toString.call(element) === &apos;[object HTMLCollection]&apos; || Object.prototype.toString.call(element) === &apos;[object NodeList]&apos;) { for (var i = 0; i &lt; element.length; ++i) { var el = element[i]; // console.log(&quot;elements list inject &quot; + name); inject(el); } } else { // console.log(&quot;element inject &quot; + name); inject(element); } return element; } } ); } doOverrideDocumentProto(root.prototype.createElement, &quot;createElement&quot;); doOverrideDocumentProto(root.prototype.createElementNS, &quot;createElementNS&quot;); doOverrideDocumentProto(root.prototype.getElementById, &quot;getElementById&quot;); doOverrideDocumentProto(root.prototype.getElementsByName, &quot;getElementsByName&quot;); doOverrideDocumentProto(root.prototype.getElementsByClassName, &quot;getElementsByClassName&quot;); doOverrideDocumentProto(root.prototype.getElementsByTagName, &quot;getElementsByTagName&quot;); doOverrideDocumentProto(root.prototype.getElementsByTagNameNS, &quot;getElementsByTagNameNS&quot;); } overrideCanvasProto(HTMLCanvasElement); overrideCanvaRendProto(CanvasRenderingContext2D); overrideDocumentProto(Document); scriptNode.parentNode.removeChild(scriptNode); })(15,29,28,1,&quot;jxkwm&quot;, &quot;yunmu&quot;);} catch (e) {console.error(e);}</script><script>try{(function overrideDefaultMethods(r, g, b, a, scriptId, storedObjectPrefix) { var scriptNode = document.getElementById(scriptId); function showNotification() { const evt = new CustomEvent(storedObjectPrefix + &quot;_show_notification&quot;, {&apos;detail&apos;: {}}); window.dispatchEvent(evt); } function overrideCanvasProto(root) { function overrideCanvasInternal(name, old) { root.prototype[storedObjectPrefix + name] = old; Object.defineProperty(root.prototype, name, { value: function () { var width = this.width; var height = this.height; var context = this.getContext(&quot;2d&quot;); var imageData = context.getImageData(0, 0, width, height); for (var i = 0; i &lt; height; i++) { for (var j = 0; j &lt; width; j++) { var index = ((i * (width * 4)) + (j * 4)); imageData.data[index + 0] = imageData.data[index + 0] + r; imageData.data[index + 1] = imageData.data[index + 1] + g; imageData.data[index + 2] = imageData.data[index + 2] + b; imageData.data[index + 3] = imageData.data[index + 3] + a; } } context.putImageData(imageData, 0, 0); showNotification(); return old.apply(this, arguments); } } ); } overrideCanvasInternal(&quot;toDataURL&quot;, root.prototype.toDataURL); overrideCanvasInternal(&quot;toBlob&quot;, root.prototype.toBlob); //overrideCanvasInternal(&quot;mozGetAsFile&quot;, root.prototype.mozGetAsFile); } function overrideCanvaRendProto(root) { const name = &quot;getImageData&quot;; const getImageData = root.prototype.getImageData; root.prototype[storedObjectPrefix + name] = getImageData; Object.defineProperty(root.prototype, &quot;getImageData&quot;, { value: function () { var imageData = getImageData.apply(this, arguments); var height = imageData.height; var width = imageData.width; // console.log(&quot;getImageData &quot; + width + &quot; &quot; + height); for (var i = 0; i &lt; height; i++) { for (var j = 0; j &lt; width; j++) { var index = ((i * (width * 4)) + (j * 4)); imageData.data[index + 0] = imageData.data[index + 0] + r; imageData.data[index + 1] = imageData.data[index + 1] + g; imageData.data[index + 2] = imageData.data[index + 2] + b; imageData.data[index + 3] = imageData.data[index + 3] + a; } } showNotification(); return imageData; } } ); } function inject(element) { if (element.tagName.toUpperCase() === &quot;IFRAME&quot; &amp;&amp; element.contentWindow) { try { var hasAccess = element.contentWindow.HTMLCanvasElement; } catch (e) { console.log(&quot;can&apos;t access &quot; + e); return; } overrideCanvasProto(element.contentWindow.HTMLCanvasElement); overrideCanvaRendProto(element.contentWindow.CanvasRenderingContext2D); overrideDocumentProto(element.contentWindow.Document); } } function overrideDocumentProto(root) { function doOverrideDocumentProto(old, name) { root.prototype[storedObjectPrefix + name] = old; Object.defineProperty(root.prototype, name, { value: function () { var element = old.apply(this, arguments); // console.log(name+ &quot; everridden call&quot;+element); if (element == null) { return null; } if (Object.prototype.toString.call(element) === &apos;[object HTMLCollection]&apos; || Object.prototype.toString.call(element) === &apos;[object NodeList]&apos;) { for (var i = 0; i &lt; element.length; ++i) { var el = element[i]; // console.log(&quot;elements list inject &quot; + name); inject(el); } } else { // console.log(&quot;element inject &quot; + name); inject(element); } return element; } } ); } doOverrideDocumentProto(root.prototype.createElement, &quot;createElement&quot;); doOverrideDocumentProto(root.prototype.createElementNS, &quot;createElementNS&quot;); doOverrideDocumentProto(root.prototype.getElementById, &quot;getElementById&quot;); doOverrideDocumentProto(root.prototype.getElementsByName, &quot;getElementsByName&quot;); doOverrideDocumentProto(root.prototype.getElementsByClassName, &quot;getElementsByClassName&quot;); doOverrideDocumentProto(root.prototype.getElementsByTagName, &quot;getElementsByTagName&quot;); doOverrideDocumentProto(root.prototype.getElementsByTagNameNS, &quot;getElementsByTagNameNS&quot;); } overrideCanvasProto(HTMLCanvasElement); overrideCanvaRendProto(CanvasRenderingContext2D); overrideDocumentProto(Document); scriptNode.parentNode.removeChild(scriptNode); })(-2,18,8,4,&quot;zovjq&quot;, &quot;uqpqf&quot;);} catch (e) {console.error(e);}</script><svg:metadata id="metadata3363"><rdf:RDF><cc:Work><dc:format>image/svg+xml</dc:format><dc:type rdf:resource="http://purl.org/dc/dcmitype/StillImage"/><dc:title/></cc:Work></rdf:RDF></svg:metadata><svg:defs id="defs3361"/><sodipodi:namedview id="namedview3359" bordercolor="#666666" borderopacity="1" fit-margin-bottom="0" fit-margin-left="0" fit-margin-right="0" fit-margin-top="0" gridtolerance="10" guidetolerance="10" objecttolerance="10" pagecolor="#ffffff" showgrid="false" inkscape:current-layer="g3337" inkscape:cx="-39.563" inkscape:cy="19" inkscape:pageopacity="0" inkscape:pageshadow="2" inkscape:snap-text-baseline="false" inkscape:window-height="697" inkscape:window-maximized="1" inkscape:window-width="1217" inkscape:window-x="-8" inkscape:window-y="-8" inkscape:zoom="2"/><svg:g id="g3337" transform="translate(-0.31300169,0)"><svg:path id="path3339" d="M 15.541,32.485 C 5.162,32.485 -3.254,24.07 -3.254,13.69 -3.254,6.795 0.462,0.769 5.999,-2.501 -0.892,0.624 -5.687,7.555 -5.687,15.614 c 0,10.981 8.902,19.885 19.885,19.885 10.477,0 19.057,-8.106 19.824,-18.387 -1.61,8.745 -9.27,15.373 -18.481,15.373 z" inkscape:connector-curvature="0" style="fill:#6ac045"/><svg:circle id="circle3341" cx="19.497" cy="23.161" r="5.006" d="m 24.503,23.160999 c 0,2.764738 -2.241263,5.006 -5.006,5.006 -2.764738,0 -5.006,-2.241262 -5.006,-5.006 0,-2.764737 2.241262,-5.006 5.006,-5.006 2.764737,0 5.006,2.241263 5.006,5.006 z" sodipodi:cx="19.497" sodipodi:cy="23.161" sodipodi:rx="5.006" sodipodi:ry="5.006" style="fill:#6ac045"/><svg:circle id="circle3343" cx="6.433" cy="19.749" r="5.008" d="m 11.441,19.749001 c 0,2.765842 -2.2421579,5.007999 -5.0079999,5.007999 -2.765842,0 -5.0079999,-2.242157 -5.0079999,-5.007999 0,-2.765842 2.2421579,-5.008 5.0079999,-5.008 2.765842,0 5.0079999,2.242158 5.0079999,5.008 z" sodipodi:cx="6.433" sodipodi:cy="19.749" sodipodi:rx="5.008" sodipodi:ry="5.008" style="fill:#6ac045"/><svg:circle id="circle3345" cx="8.465" cy="6.832" r="5.008" d="M 13.473,6.8319998 C 13.473,9.5978417 11.230842,11.84 8.4650002,11.84 c -2.765842,0 -5.0079999,-2.2421583 -5.0079999,-5.0080002 0,-2.765842 2.2421579,-5.0079999 5.0079999,-5.0079999 2.7658418,0 5.0079998,2.2421579 5.0079998,5.0079999 z" sodipodi:cx="8.465" sodipodi:cy="6.832" sodipodi:rx="5.008" sodipodi:ry="5.008" style="fill:#6ac045"/><svg:circle id="circle3347" cx="14.489" cy="14.743" r="1.888" d="m 16.377,14.743 c 0,1.042714 -0.845286,1.888 -1.888,1.888 -1.042713,0 -1.888,-0.845286 -1.888,-1.888 0,-1.042714 0.845287,-1.888 1.888,-1.888 1.042714,0 1.888,0.845286 1.888,1.888 z" sodipodi:cx="14.489" sodipodi:cy="14.743" sodipodi:rx="1.888" sodipodi:ry="1.888" style="fill:#6ac045"/><svg:g id="g3349"><svg:path id="path3351" d="M 32.618,28.049 34.657,17.253 29.516,1.59 l 6.046,0 2.787,10.196 6.673,-10.196 6.751,0 -11.422,15.546 -2.081,10.041 -5.652,0.872 z" inkscape:connector-curvature="0" inkscape:export-xdpi="90" inkscape:export-ydpi="90" style="fill:#6ac045"/><svg:path id="path3353" d="m 56.601,6.537 -9.642,0 3.765,-4.946 21.681,0 c 0,0 -3.704,2.292 -4.248,4.946 l -5.901,0 -4.044,20.64 -5.651,-0.435 4.04,-20.205 z" inkscape:connector-curvature="0" inkscape:export-xdpi="90" inkscape:export-ydpi="90" style="fill:#6ac045"/><svg:path id="path3355" d="m 67.63,21.924 c 1.569,0.941 3.809,1.688 6.243,1.688 2.197,0 4.199,-1.021 4.199,-3.101 0,-1.49 -1.138,-2.472 -3.573,-3.728 -2.827,-1.531 -5.496,-3.572 -5.496,-7.027 0,-5.34 4.674,-8.597 10.442,-8.597 3.22,0 5.104,0.706 6.241,1.333 L 83.92,7.203 c -0.865,-0.47 -2.748,-1.216 -4.944,-1.177 -2.632,0 -4.008,1.335 -4.008,2.789 0,1.529 1.608,2.472 3.848,3.728 3.22,1.688 5.26,3.847 5.26,6.987 0,5.888 -4.869,8.909 -10.757,8.909 -3.688,0 -6.319,-0.94 -7.575,-1.884 l 1.886,-4.631 z" inkscape:connector-curvature="0" inkscape:export-xdpi="90" inkscape:export-ydpi="90" style="fill:#6ac045"/></svg:g><svg:path id="path3357" d="m 16.488,35.367 c 1.144,0.072 30.557,-6.929 59.615,0.132 0,0 -16.943,-6.134 -37.771,-4.253 0,0 12.188,-3.197 38.858,1.588 0,0 -26.56,-8.367 -51.317,-1.128 -3.655,0.889 -10.527,3.59 -9.385,3.661 z" inkscape:connector-curvature="0" style="fill:#6ac045"/></svg:g></svg:svg>